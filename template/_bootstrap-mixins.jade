//- Common mixins that templates can share

mixin User
    #user-content
        form#user-login
            h3
                | Login    
            .messages
                .send-success
                    | Successfully sent!
                .successfully-reset
                    | Successfully reset the password! Please log in.
                .reset-request-sent
                    | An email with a reset-link should arrive soon!
                .signed-up
                    | Thank you for registering. You should receive a mail to activate your account.
                .activated
                    | Your account has been activated! Please log in.
            label(for="email")
                | Email
            input(type="text", name="email").email
            label(for="password")
                | Password
            input(type="password", name="password").password
            button(type="submit").login
                | Login
            a.register
                | Sign-up
            a.reset
                | Forgot Password?
            .error
                .error-email
                    | Please enter your email address.
                .error-password
                    | Please enter your password.
                .error-responseJson
                    | Login seems to be broken. (1)
                .error-request
                    | Login seems to be broken. (2)
                .error-credentials
                    | Invalid credentials.
        form#user-register
            h3
                | Sign-up
            label(for="email")
                | Email
            input(type="text", name="email").email
            label(for="password")
                | Password
            input(type="password", name="password").password
            label(for="password2")
                | Password Confirmation
            input(type="password", name="password2").password2
            br
            input(type="checkbox", name="agreed").agreed
            label(for="agreed")
                | I agree to the 
                a(href="/#page:terms-of-use")
                    | Terms of Use
            br
            button(type="submit").register
                | Sign-up
            a.cancel
                | Cancel
            .error
                .error-notAgreed
                    | Please agree to the terms (by checking the check-box).
                .error-email
                    | Please enter a valid email address.
                .error-password
                    | Please enter a password that has at least 8 characters.
                .error-passwordNoMatch
                    | The passwords don't match.
                .error-userExists
                    | This user has already be registered.
                .error-unspecified
                    | Could'nt register.
        form#user-password-reset
            h3
                | Reset Password
            label(for="email")
                | Email
            input(type="text", name="email").email
            button(type="submit").reset
                | Request reset
            a.cancel
                | Cancel
            .error
                .error-email
                    | Please enter a valid email address.
                .error-unspecified
                    | Could'nt reset the password. Maybe the user doesn't exist?
        form#user-password-reset-continue
            h3
                | New Password
            label(for="email")
                | Email
            input(type="text", name="email").email
            label(for="email")
                | Token
            input(type="text", name="token").token
            label(for="password")
                | Password
            input(type="password", name="password").password
            label(for="password2")
                | Password Confirmation
            input(type="password", name="password2").password2
            button(type="submit").reset
                | Change Password
            a.cancel
                | Cancel
            .error
                .error-email
                    | Please enter a valid email address.
                .error-password
                    | Please enter a password that has at least 8 characters.
                .error-passwordNoMatch
                    | The passwords don't match.
                .error-noToken
                    | The token is missing.
                .error-unspecified
                    | Could'nt reset the password. Maybe the token is wrong?
        #user-data
            h3
                | Welcome!
            span(data-hook="email")
            label
                | Application Token:
            pre(data-hook="token")
            a.logout
                | Logout
            a.refresh(title="Warning! The old application token becomes invalid!")
                | New application token

mixin NavBlock(collapsible, multipage, id)
    a.list-group-item.heading.collapsed(data-toggle="#{(collapsible ? 'collapse' : '')}", data-target="##{(multipage ? 'page:' : '') + slug(id)}-menu", href="##{(multipage ? 'page:' : '') + slug(id)}")
        block

mixin NavItem(multipage, groupId, id)
    a.list-group-item(href="##{multipage ? 'page:' + slug(groupId) + ',header:' : ''}#{slug(groupId)}-#{slug(id)}", style="border-top-left-radius: 0; border-top-right-radius: 0")
        block

mixin Nav(multipage, collapsible)
    div.col-md-3
        nav#nav.hidden-sm.hidden-xs.affix.nav  
            +User
            if multipage
                .list-group
                    a.list-group-item.heading(href="#") About
            each resourceGroup in api.resourceGroups
                .list-group
                    +NavBlock(collapsible, multipage, resourceGroup.name)
                        if collapsible && resourceGroup.resources.length
                            span.toggle.pull-right
                                span.open.fa.fa-angle-down
                                span.closed.fa.fa-angle-right
                        = resourceGroup.name || 'Resource Group'
                    div(class=collapsible ? 'collapse' : '', id="#{(multipage ? 'page:' : '') + slug(resourceGroup.name)}-menu")
                        each resource in resourceGroup.resources
                            if !condenseNav || (resource.actions.length != 1)
                                +NavItem(multipage, resourceGroup.name, resource.name)
                                    = resource.name || 'Resource'
                                each action in resource.actions
                                    a.list-group-item(href="##{multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : ''}#{slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}", style="border-top-left-radius: 0; border-top-right-radius: 0")
                                        +Icon(action.method)
                                        span.indent
                                            = action.name || action.method + ' ' + resource.uriTemplate
                            else
                                +NavItem(multipage, resourceGroup.name, resource.name)
                                    - var action = resource.actions[0]
                                    +Icon(action.method)
                                    = resource.name || action.name || action.method + ' ' + resource.uriTemplate
            .list-group
                +NavBlock(collapsible, multipage, "terms-of-use")
                    | Terms of Use

            .list-group
                +NavBlock(collapsible, multipage, "attribution")
                    | Attribution Guidelines

            .list-group
                +NavBlock(collapsible, multipage, "branding-guide")
                    | Branding Guide
            //-
                each meta in api.metadata
                    if meta.name == 'HOST'
                        p(style="text-align: center; word-wrap: break-word;")
                            a(href=meta.value)= meta.value

mixin Parameters(params)
    ul.list-group
        li.list-group-item.bg-default: strong Parameters
        li.list-group-item
            dl.dl-horizontal
                each param in params
                    dt= param.name
                    dd
                        code= param.type
                        | &nbsp;
                        if param.required
                            span.required (required)
                        else
                            span (optional)
                        | &nbsp;
                        if param.default
                            span.text-info.default
                                strong Default:&nbsp;
                                span= param.default
                            | &nbsp;
                        if param.example
                            span.text-muted.example
                                strong Example:&nbsp;
                                span= param.example
                        != markdown(param.description)
                        if param.values.length
                            p
                                strong Choices:&nbsp;
                                each value in param.values
                                    code= value.value
                                    = ' '

mixin RequestResponse(title, request, resourceGroup, resource, action)
    - var id = hash(resourceGroup.name.toString() + resource.name.toString() + action.name.toString() + action.method.toString() + title.toString() + request.name.toString() + request.headers.toString() + request.body.toString() + request.schema.toString())
    - var content = request.description || Object.keys(request.headers).length || request.body || request.schema
    li.list-group-item
        strong
            = title
            if request.name
                | &nbsp;&nbsp;
                code= request.name
        if content
            a.pull-right.collapsed(data-toggle="collapse", data-target="##{id}")
                span.closed Show
                span.open Hide
    if content
        li.list-group-item.panel-collapse.collapse(id=id)
            if request.description
                .description!= markdown(request.description)

            if Object.keys(request.headers).length
                h5 Headers
                pre
                    code
                        each item in request.headers
                            != highlight(item.name + ': ' + item.value, 'http')
                            br
            if request.body
                h5 Body
                pre
                    code!= highlight(request.body)
            if request.schema
                h5 Schema
                pre
                    code!= highlight(request.schema)


mixin Examples(resourceGroup, resource, action)
    ul.list-group
        each example in action.examples
            each request in example.requests
                +RequestResponse('Request', request, resourceGroup, resource, action)
            each response in example.responses
                +RequestResponse('Response', response, resourceGroup, resource, action)

mixin ResourceGroup(resourceGroup, getButtonClass, multipage)
    .panel.panel-default
        .panel-heading
            h3(id="#{slug(resourceGroup.name)}")
                = resourceGroup.name || 'Resource Group'
                | &nbsp;
                a(href="##{multipage ? 'page:' : ''}#{slug(resourceGroup.name)}")
                    i.fa.fa-link
        .panel-body
            if resourceGroup.description
                != markdown(resourceGroup.description)
            each resource in resourceGroup.resources
                h4(id="#{slug(resourceGroup.name)}-#{slug(resource.name)}")
                    = resource.name || 'Resources'
                    | &nbsp;
                    a(href="##{(multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : '')}#{slug(resourceGroup.name)}-#{slug(resource.name)}")
                        i.fa.fa-link
                if resource.description
                    != markdown(resource.description)
                each action in resource.actions
                    case action.method
                        when 'POST': - var panelClass = 'panel-success'
                        when 'GET': - var panelClass = 'panel-info'
                        when 'PUT': - var panelClass = 'panel-warning'
                        when 'PATCH': - var panelClass = 'panel-warning'
                        when 'DELETE': - var panelClass = 'panel-danger'
                        default: - var panelClass = 'panel-default'
                    section.panel(class=panelClass, id="#{slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}")
                        .panel-heading
                            if action.name
                                div(style="float:right")
                                    span(style="text-transform: lowercase")= action.name
                            case action.method
                                when 'POST': - var btnClass = 'btn-success'
                                when 'GET': - var btnClass = 'btn-' + getButtonClass
                                when 'PUT': - var btnClass = 'btn-warning'
                                when 'PATCH': - var btnClass = 'btn-warning'
                                when 'DELETE': - var btnClass = 'btn-danger'
                                default: - var btnClass = 'btn-default'
                            div(style="float:left")
                                a.btn.btn-xs(class=btnClass, href="##{(multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : '')}#{slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}")= action.method
                            div(style="overflow:hidden")
                                code= resource.uriTemplate
                        if action.description
                            .panel-body!= markdown(action.description)

                        - var params = action.parameters.length ? action.parameters : resource.parameters
                        if params.length
                            +Parameters(params)
                        if action.examples
                            +Examples(resourceGroup, resource, action)

mixin Paginate(resourceGroups, index)
    if index < resourceGroups.length - 1
        a.btn.btn-default.pull-right(href="#page:#{slug(resourceGroups[index + 1].name)}")
            | Next&nbsp;
            i.fa.fa-arrow-circle-right

    if index > 0
        a.btn.btn-default(href="#page:#{slug(resourceGroups[index - 1].name)}")
            i.fa.fa-arrow-circle-left
            |  Previous
    else
        a.btn.btn-default(href="#")
            i.fa.fa-arrow-circle-left
            |  Previous
    .clearfix
    hr

mixin Icon(method)
    case method
        when 'GET'
            span.badge.alert-info
                i.fa.fa-arrow-down
        when 'POST'
            span.badge.alert-success
                i.fa.fa-plus
        when 'PUT'
            span.badge.alert-warning
                i.fa.fa-pencil
        when 'PATCH'
            span.badge.alert-warning
                i.fa.fa-pencil
        when 'DELETE'
            span.badge.alert-danger
                i.fa.fa-times
        default
            span.badge
                i.fa.fa-dot-circle-o

mixin BindSlug(id, multipage)
    div(data-bind=multipage ? "visible: page() == '#{slug(id)}', style: {marginTop: page() == '#{slug(id)}' ? '38px' : ''}" : undefined)&attributes(attributes)
        block

mixin Content(getButtonClass, multipage)
    header
        .page-header
            h1#top
                img(src="KS-logo-2014.png", title="KansaiScene", width="300")
                = api.name || 'API Documentation'
    div(data-bind=multipage ? "visible: page() == 'home'" : undefined)
        .description!= markdown(api.description)

        if multipage
            a.btn.btn-default.pull-right(href="#page:#{slug(api.resourceGroups[0].name)}")
                | Next&nbsp;
                i.fa.fa-arrow-circle-right
            .clearfix
            hr

    each resourceGroup, index in api.resourceGroups
        +BindSlug(resourceGroup.name, multipage)
            +ResourceGroup(resourceGroup, getButtonClass, multipage)

            if multipage
                +Paginate(api.resourceGroups, index)


    +BindSlug("terms-of-use", multipage)(class="additional")
        include:md ../terms-of-use.md
        hr

    +BindSlug("attribution", multipage)(class="additional")
        include:md ../attribution.md
        hr

    +BindSlug("branding-guide", multipage)(class="additional")
        include:md ../branding-guide.md
        hr

    footer
        ul
            li
                a(href="#page:branding-guide")="Branding Guide"
            li
                a(href="#page:terms-of-use")="Terms of Use"
            li
                a(href="#page:attribution")="Attribution Guidelines"
            li 
                a(href="https://kansaiscene.com", target="_blank")="KansaiScene"

mixin Multipage()
    //- Multi-page support through Knockout.js
    script(src="//cdnjs.cloudflare.com/ajax/libs/knockout/3.0.0/knockout-min.js")
    script
        :coffee
            class App
                constructor: ->
                    @page = ko.observable 'home'

            window.app = new App()

            window.onhashchange = ->
                vars = {}
                for v in location.hash.substr(1).split(',')
                    parts = v.split ':'
                    vars[parts[0]] = parts[1]

                # Set the page
                window.app.page vars.page or 'home'

                # Scroll to a header if Set
                if vars.header
                    $("##{vars.header}")[0].scrollIntoView true
                else
                    window.scrollTo 0, 0

            ko.applyBindings window.app

            # Load the correct page
            window.onhashchange()
